(defstruct file (is-folder t) (data (make-hash-table :test 'equal)) fname)

(defun mapfolder (func filesys) 
	(funcall func filesys)
	(maphash #'(lambda (key val) 
		(when (file-is-folder val)
			(unless (or (equal key "..") (equal key "/"))
				(mapfolder func val)
			)
		)
	) (file-data filesys))
)

(defun sizefile (filesys)
	(unless (file-is-folder filesys)
		(return-from sizefile (file-data filesys))
	)
	(let ((size 0))
		(maphash #'(lambda (key val)
			(unless (or (equal key "..") (equal key "/"))
				(setf size (+ size (sizefile val)))
			)
		) (file-data filesys))
		(return-from sizefile size)
	)
)

(let ((infile (open "../input/input7.txt" :if-does-not-exist nil)))
   (if infile
	    (let ((filesys (make-file :fname "/")))
			(setf (gethash "/" (file-data filesys)) filesys)
			(loop for line = (read-line infile nil) while line do 
				(when (CHAR= (char line (- (length line) 1)) #\Return) 
					(setf line (subseq line 0 (- (length line) 1)))
				)
				(cond ((equal (subseq line 0 4) "$ cd")
					(setf filesys (gethash (subseq line 5) (file-data filesys)))
				)((equal (subseq line 0 4) "$ ls")
					()
				)((equal (subseq line 0 3) "dir")
					(let ((subfolder (make-file :fname (subseq line 4))))
						(setf (gethash ".." (file-data subfolder)) filesys)
						(setf (gethash "/" (file-data subfolder)) (gethash "/" (file-data filesys)))
						(setf (gethash (subseq line 4) (file-data filesys)) subfolder)
					)
				)(t
					(let ((split (position #\Space line)))
						(let ((key (subseq line (+ split 1)))(val (parse-integer (subseq line 0 split))))
							(setf (gethash key (file-data filesys))
								(make-file :fname key :is-folder nil :data val)
							)
						)
					)
				)
				)
			)
			(setf filesys (gethash "/" (file-data filesys)))
			(let ((size 0)(smallest 70000000)(needed (- (sizefile filesys) 40000000)))
				(mapfolder #'(lambda (file) (let ((file-size (sizefile file)))
					(when (<= file-size 100000) 
						(setf size (+ size file-size))
					)
					(when (and (>= file-size needed) (< file-size smallest))
						(setf smallest file-size)
					)
				)) filesys)
				(write size)
				(terpri)
				(write smallest)
				(terpri)
			)
	    )
		(write-line "Could not open file")
	)
)